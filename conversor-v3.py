# ==================================================
# Conversor de bases num√©ricas (Decimal <-> Binario)
# ==================================================

# üîπ Importamos el m√≥dulo sys, que nos da acceso a funciones del sistema.
# En este programa lo usamos para salir del programa con sys.exit()
import sys

# üßæ Funci√≥n para mostrar el men√∫ principal en pantalla
def mostrar_menu():
    print("\n" + "="*50)  # Imprime una l√≠nea de separaci√≥n
    print("CONVERSOR DE BASES NUM√âRICAS".center(50))  # Centra el t√≠tulo
    print("="*50)
    print("1. Decimal a Binario")  # Opci√≥n para convertir de decimal a binario
    print("2. Binario a Decimal")  # Opci√≥n para convertir de binario a decimal
    print("3. Salir")  # Opci√≥n para salir del programa
    print("="*50)

# üî¢ Funci√≥n para convertir de decimal a binario (solo positivos)
def decimal_a_binario():
    while True:
        entrada = input("\nIngresa un n√∫mero entero positivo: ")  # Solicitamos entrada

        # Intentamos convertir la entrada a entero
        try:
            decimal = int(entrada)
            if decimal < 0:
                # Si el n√∫mero es negativo, mostramos error y pedimos otro
                print("‚ùå Error: Solo se permiten n√∫meros positivos.")
                continue
            break  # Si es v√°lido, salimos del bucle
        except ValueError:
            print("‚ùå Error: Debes ingresar un n√∫mero entero v√°lido.")

    original = decimal  # Guardamos el n√∫mero original para mostrarlo despu√©s

    # Caso especial: si el n√∫mero es 0, el binario es simplemente "0"
    if decimal == 0:
        binario = "0"
    else:
        binario = ""
        # Realizamos la conversi√≥n dividiendo por 2 y almacenando los restos
        while decimal > 0:
            binario = str(decimal % 2) + binario  # Agregamos el bit a la izquierda
            decimal = decimal // 2  # Dividimos entre 2

    return binario, original  # Devolvemos el binario y el n√∫mero original

# üßÆ Funci√≥n para convertir de binario a decimal (solo binarios simples)
def binario_a_decimal():
    while True:
        binario = input("\nIngresa un n√∫mero binario (ej: 1010): ").strip()  # Solicitamos entrada

        # Validamos que solo contenga caracteres 0 o 1
        if not all(c in {'0', '1'} for c in binario):
            print("‚ùå Error: Solo se permiten d√≠gitos 0 y 1.")
            continue
        
        # Validamos que haya al menos un d√≠gito
        if len(binario) == 0:
            print("‚ùå Error: Debes ingresar al menos un d√≠gito binario.")
            continue
        
        break  # Si pasa todas las validaciones, salimos del bucle

    exponente = len(binario) - 1  # Comenzamos desde el bit m√°s significativo
    nroDecimal = 0  # Acumulador para el resultado

    # Recorremos cada bit y sumamos su valor en base 10
    for bit in binario:
        nroDecimal += int(bit) * (2 ** exponente)  # Valor del bit multiplicado por 2^posici√≥n
        exponente -= 1

    return nroDecimal, binario  # Devolvemos el n√∫mero decimal y el binario original

# üß† Funci√≥n principal que maneja el flujo del programa
def main():
    while True:
        mostrar_menu()  # Mostramos el men√∫
        opcion = input("\nSelecciona una opci√≥n (1-3): ")  # Leemos opci√≥n del usuario

        # Evaluamos la opci√≥n elegida
        if opcion == "1":
            binario, original = decimal_a_binario()  # Convertimos decimal a binario
            print(f"\nEl n√∫mero {original} en decimal es {binario} en binario")
        elif opcion == "2":
            nroDecimal, binario = binario_a_decimal()  # Convertimos binario a decimal
            print(f"\nEl n√∫mero binario {binario} es {nroDecimal} en decimal")
        elif opcion == "3":
            print("\n¬°Gracias por usar el conversor! Hasta pronto.")
            sys.exit()  # Salimos del programa de forma segura
        else:
            print("‚ùå Opci√≥n no v√°lida. Por favor ingresa 1, 2 o 3.")

        input("\nPresiona Enter para continuar...")  # Pausa antes de volver al men√∫

# üöÄ Ejecutamos la funci√≥n principal 
main()
